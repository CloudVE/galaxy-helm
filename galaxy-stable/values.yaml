# Default values for galaxy-stable.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
replicaCount: 1

# The data folder used by the galaxy and proftpd containers
export_dir: &export_anchor "/export"

# Settings for the init image
init:
  image:
    repository: galaxy/galaxy-init
    tag: v18.01
    pullPolicy: IfNotPresent
  resources: {}

image:
  repository: galaxy/galaxy-stable
  tag: v18.01
  pullPolicy: IfNotPresent

# Probably not needed as all on /export
tools:
  destination: "/export/tools"

# Settings for k8s job runner
k8s:
  supp_groups:
  fs_group:

# Admin user settings
admin:
  email: "admin@galaxyproject.org"
  password: "change-me"
  api_key: "changemetoo"
  username: admin

# If defined, config files such as galaxy.yml, job_conf.xml etc. will be mapped in from this folder
# development_folder:

# Galaxy config settings to pass to the container. These will be sent in as env vars
# prefixed by GALAXY_CONFIG_, which will override the corresponding setting in galaxy.yml
galaxy_conf:
  brand: "k8s"
  admin_users: "admin@galaxyproject.org"
  allow_user_deletion:
  allow_user_creation:
  # smtp_server:
  # smtp_username:
  # smtp_password:
  # email_from:
  # smtp_ssl:
  # url:
  # ftp_upload_site:
  containers_resolvers_config_file: "/export/config/container_resolvers_conf.xml"

# settings which affect job_conf.xml
job_conf:
  runners:
    enable_local: "true"
    enable_condor: "false"
    enable_slurm: "false"
    enable_k8: "true"
    # k8s_use_service_account:
    # k8s_persistent_volume_claim_name:
    k8s_persistent_volume_claim_mount_path: *export_anchor
    # k8s_namespace:
    # k8s_supplemental_group_id:
    # k8s_fs_group_id:
    # k8s_pull_policy:
    # k8s_pod_retrials:
  destinations:
    default: "docker_dispatch"
    docker_default: "k8s_default"
    no_docker_default: "local_no_container"

## Persist data to a persistent volume
persistence:
  enabled: true
  name: &pvcname galaxy-pvc

  ## A manually managed Persistent Volume and Claim
  ## Requires persistence.enabled: true

  ## If defined, PVC must be created manually before volume will be bound
  # existingClaim:

  ## database data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"
  accessMode: ReadWriteMany
  size: 15Gi
  subPath: ""

  # optional settings to enable minikube PV
  minikube:
    enabled: true
    hostPath: "/data/galaxy-stable-18.01"

  # annotations: {}

service:
  type: ClusterIP
  port: 80
  # Only effective if service.type is NodePort
  nodePortExposed: 30700


ingress:
  enabled: true
  # enable to add a custom nginx replication controller for nginx.
  # Leave diabled and enable nginx annotation to use kube provider managed ingress controller.
  self_managed: false
  path: /galaxy
  # Used to create Ingress record (should used with service.type: ClusterIP).
  annotations:
    kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - ~
  tls: []
    # Secrets must be manually created in the namespace.
    # - secretName: chart-example-tls
    #   hosts:
    #     - chart-example.local
resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious 
  # choice for the user. This also increases chances charts run on environments with little 
  # resources, such as Minikube. If you do want to specify resources, uncomment the following 
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  #requests:
  #  cpu: 100m
  #  memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

postgresql:
  enabled: true
  image: "pcm32/galaxy-postgres"
  imageTag: "9.6.5_for_18.01"
  postgresDatabase: "galaxydb"
  postgresUser: "galaxy"
  postgresPassword: "change-me"
  persistence:
    existingClaim: *pvcname
    subPath: "postgres"

rbac:
  enabled: false

condor:
  enabled: false

proftpd:
  enabled: true
  replicaCount: 1
  image: 
    repository: "container-registry.phenomenal-h2020.eu/phnmnl/galaxy-proftpd"
    tag: "for_galaxy_v17.09"
    pullPolicy: IfNotPresent
  passive_port:
    low: 30000
    high: 30010
  use_sftp: true
  generate_ssh_key: false
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  service:
    type: ClusterIP
    port: 22
    # Only effective if service.type is NodePort
    nodePortExposed: 30722
